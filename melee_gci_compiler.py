#!/usr/bin/env python3
"""melee-gci-compiler.py: Compiles custom data into Melee GCI save files using
   MGC script files"""
import argparse
import sys
import hashlib
from pathlib import Path
import mgc.compiler as compiler
import mgc.logger as logger
from mgc.errors import CompileError


def _read_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
            epilog="You can omit script_path to pack or unpack a GCI without changing its content."
    )

    parser.add_argument(
            "script_path",
            nargs="?",
            type=str,
            help="The path to the MGC script file you want to compile."
    )
    parser.add_argument(
            "-i",
            dest="input_gci",
            type=str,
            help="Optionally input a Melee GCI to use its existing data as a base."
    )
    parser.add_argument(
            "-o",
            dest="output_gci",
            type=str,
            help="The GCI file to output. If omitted, no data will be written."
    )
    parser.add_argument(
            "--nopack",
            action="store_true",
            help="Do not pack the GCI, so you can inspect the outputted data."
    )
    parser.add_argument(
            "--silent",
            action="store_true",
            help="Suppress command line output, except for fatal errors."
    )
    parser.add_argument(
            "--debug",
            action="store_true",
            help="Output extra information while compiling and on errors."
    )

    return parser.parse_args()


def main(args: argparse.Namespace):
    if not args.script_path:
        logger.warning("No MGC script specified; no custom data will be compiled")
    try:
        gci_data = compiler.init(args.script_path, input_gci_path=args.input_gci,
                                 nopack=args.nopack, silent=args.silent, debug=args.debug)
    except CompileError as e:
        if args.debug:
            raise
        else:
            logger.error(e.message)
            _cleanup(args.script_path)
            return 10
    logger.info("Compile successful")
    if not args.output_gci:
        logger.info("No output GCI specified; no files will be written")
    else:
        if args.nopack:
            msg = "Writing unpacked GCI file; not loadable by Melee"
        else:
            msg = "Writing final GCI file"
        logger.info(msg)
        _write_gci(args.output_gci, gci_data, args.debug)
    md5 = hashlib.md5(gci_data).hexdigest()
    logger.info(f"MD5: {md5}")
    logger.info("All tasks finished")
    _cleanup(args.script_path)
    return 0


def _write_gci(path: str, data: bytes, debug: bool):
    try:
        with open(path, 'wb') as f: f.write(data)
    except Exception as e:
        if debug:
            raise
        else:
            logger.error(f"Couldn't write GCI file: {e}")


def _cleanup(script_path):
    """Deletes temp files generated by the ASM compiler."""
    if not script_path:
        return
    tmp_path = Path(script_path).parent/"tmp"
    (tmp_path/"code.txt").unlink(missing_ok=True)
    (tmp_path/"code.bin").unlink(missing_ok=True)
    (tmp_path/"src1.o").unlink(missing_ok=True)
    (tmp_path/"src2.o").unlink(missing_ok=True)
    # Remove tmp directory only if empty
    try:
        tmp_path.rmdir()
    except Exception:
        pass
    return


if __name__ == "__main__":
    sys.exit(main(_read_args()))
